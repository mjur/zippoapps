// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/mjur/zippo/pkg/configuration"
	"sync"
	"time"
)

// Ensure, that CacheMock does implement configuration.Cache.
// If this is not the case, regenerate this file with moq.
var _ configuration.Cache = &CacheMock{}

// CacheMock is a mock implementation of configuration.Cache.
//
// 	func TestSomethingThatUsesCache(t *testing.T) {
//
// 		// make and configure a mocked configuration.Cache
// 		mockedCache := &CacheMock{
// 			GetFunc: func(s string) (any, bool) {
// 				panic("mock out the Get method")
// 			},
// 			SetFunc: func(s string, ifaceVal any, duration time.Duration)  {
// 				panic("mock out the Set method")
// 			},
// 		}
//
// 		// use mockedCache in code that requires configuration.Cache
// 		// and then make assertions.
//
// 	}
type CacheMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(s string) (any, bool)

	// SetFunc mocks the Set method.
	SetFunc func(s string, ifaceVal any, duration time.Duration)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// S is the s argument value.
			S string
		}
		// Set holds details about calls to the Set method.
		Set []struct {
			// S is the s argument value.
			S string
			// IfaceVal is the ifaceVal argument value.
			IfaceVal any
			// Duration is the duration argument value.
			Duration time.Duration
		}
	}
	lockGet sync.RWMutex
	lockSet sync.RWMutex
}

// Get calls GetFunc.
func (mock *CacheMock) Get(s string) (any, bool) {
	if mock.GetFunc == nil {
		panic("CacheMock.GetFunc: method is nil but Cache.Get was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(s)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedCache.GetCalls())
func (mock *CacheMock) GetCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Set calls SetFunc.
func (mock *CacheMock) Set(s string, ifaceVal any, duration time.Duration) {
	if mock.SetFunc == nil {
		panic("CacheMock.SetFunc: method is nil but Cache.Set was just called")
	}
	callInfo := struct {
		S        string
		IfaceVal any
		Duration time.Duration
	}{
		S:        s,
		IfaceVal: ifaceVal,
		Duration: duration,
	}
	mock.lockSet.Lock()
	mock.calls.Set = append(mock.calls.Set, callInfo)
	mock.lockSet.Unlock()
	mock.SetFunc(s, ifaceVal, duration)
}

// SetCalls gets all the calls that were made to Set.
// Check the length with:
//     len(mockedCache.SetCalls())
func (mock *CacheMock) SetCalls() []struct {
	S        string
	IfaceVal any
	Duration time.Duration
} {
	var calls []struct {
		S        string
		IfaceVal any
		Duration time.Duration
	}
	mock.lockSet.RLock()
	calls = mock.calls.Set
	mock.lockSet.RUnlock()
	return calls
}
