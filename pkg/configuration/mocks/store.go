// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/mjur/zippo/pkg/configuration"
	"sync"
)

// Ensure, that StoreMock does implement configuration.Store.
// If this is not the case, regenerate this file with moq.
var _ configuration.Store = &StoreMock{}

// StoreMock is a mock implementation of configuration.Store.
//
// 	func TestSomethingThatUsesStore(t *testing.T) {
//
// 		// make and configure a mocked configuration.Store
// 		mockedStore := &StoreMock{
// 			GetMainSkusFunc: func(contextMoqParam context.Context, s1 string, s2 string) ([]configuration.MainSku, error) {
// 				panic("mock out the GetMainSkus method")
// 			},
// 		}
//
// 		// use mockedStore in code that requires configuration.Store
// 		// and then make assertions.
//
// 	}
type StoreMock struct {
	// GetMainSkusFunc mocks the GetMainSkus method.
	GetMainSkusFunc func(contextMoqParam context.Context, s1 string, s2 string) ([]configuration.MainSku, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetMainSkus holds details about calls to the GetMainSkus method.
		GetMainSkus []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S1 is the s1 argument value.
			S1 string
			// S2 is the s2 argument value.
			S2 string
		}
	}
	lockGetMainSkus sync.RWMutex
}

// GetMainSkus calls GetMainSkusFunc.
func (mock *StoreMock) GetMainSkus(contextMoqParam context.Context, s1 string, s2 string) ([]configuration.MainSku, error) {
	if mock.GetMainSkusFunc == nil {
		panic("StoreMock.GetMainSkusFunc: method is nil but Store.GetMainSkus was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		S1              string
		S2              string
	}{
		ContextMoqParam: contextMoqParam,
		S1:              s1,
		S2:              s2,
	}
	mock.lockGetMainSkus.Lock()
	mock.calls.GetMainSkus = append(mock.calls.GetMainSkus, callInfo)
	mock.lockGetMainSkus.Unlock()
	return mock.GetMainSkusFunc(contextMoqParam, s1, s2)
}

// GetMainSkusCalls gets all the calls that were made to GetMainSkus.
// Check the length with:
//     len(mockedStore.GetMainSkusCalls())
func (mock *StoreMock) GetMainSkusCalls() []struct {
	ContextMoqParam context.Context
	S1              string
	S2              string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S1              string
		S2              string
	}
	mock.lockGetMainSkus.RLock()
	calls = mock.calls.GetMainSkus
	mock.lockGetMainSkus.RUnlock()
	return calls
}
