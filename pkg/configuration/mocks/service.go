// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/mjur/zippo/pkg/configuration"
	"sync"
)

// Ensure, that ServiceMock does implement configuration.Service.
// If this is not the case, regenerate this file with moq.
var _ configuration.Service = &ServiceMock{}

// ServiceMock is a mock implementation of configuration.Service.
//
// 	func TestSomethingThatUsesService(t *testing.T) {
//
// 		// make and configure a mocked configuration.Service
// 		mockedService := &ServiceMock{
// 			GetMainSkuFunc: func(contextMoqParam context.Context, s1 string, s2 string) (*configuration.MainSku, error) {
// 				panic("mock out the GetMainSku method")
// 			},
// 		}
//
// 		// use mockedService in code that requires configuration.Service
// 		// and then make assertions.
//
// 	}
type ServiceMock struct {
	// GetMainSkuFunc mocks the GetMainSku method.
	GetMainSkuFunc func(contextMoqParam context.Context, s1 string, s2 string) (*configuration.MainSku, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetMainSku holds details about calls to the GetMainSku method.
		GetMainSku []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S1 is the s1 argument value.
			S1 string
			// S2 is the s2 argument value.
			S2 string
		}
	}
	lockGetMainSku sync.RWMutex
}

// GetMainSku calls GetMainSkuFunc.
func (mock *ServiceMock) GetMainSku(contextMoqParam context.Context, s1 string, s2 string) (*configuration.MainSku, error) {
	if mock.GetMainSkuFunc == nil {
		panic("ServiceMock.GetMainSkuFunc: method is nil but Service.GetMainSku was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		S1              string
		S2              string
	}{
		ContextMoqParam: contextMoqParam,
		S1:              s1,
		S2:              s2,
	}
	mock.lockGetMainSku.Lock()
	mock.calls.GetMainSku = append(mock.calls.GetMainSku, callInfo)
	mock.lockGetMainSku.Unlock()
	return mock.GetMainSkuFunc(contextMoqParam, s1, s2)
}

// GetMainSkuCalls gets all the calls that were made to GetMainSku.
// Check the length with:
//     len(mockedService.GetMainSkuCalls())
func (mock *ServiceMock) GetMainSkuCalls() []struct {
	ContextMoqParam context.Context
	S1              string
	S2              string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S1              string
		S2              string
	}
	mock.lockGetMainSku.RLock()
	calls = mock.calls.GetMainSku
	mock.lockGetMainSku.RUnlock()
	return calls
}
