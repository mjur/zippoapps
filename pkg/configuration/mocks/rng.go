// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/mjur/zippo/pkg/configuration"
	"sync"
)

// Ensure, that RandomNumberGeneratorMock does implement configuration.RandomNumberGenerator.
// If this is not the case, regenerate this file with moq.
var _ configuration.RandomNumberGenerator = &RandomNumberGeneratorMock{}

// RandomNumberGeneratorMock is a mock implementation of configuration.RandomNumberGenerator.
//
// 	func TestSomethingThatUsesRandomNumberGenerator(t *testing.T) {
//
// 		// make and configure a mocked configuration.RandomNumberGenerator
// 		mockedRandomNumberGenerator := &RandomNumberGeneratorMock{
// 			IntnFunc: func(n int) int {
// 				panic("mock out the Intn method")
// 			},
// 		}
//
// 		// use mockedRandomNumberGenerator in code that requires configuration.RandomNumberGenerator
// 		// and then make assertions.
//
// 	}
type RandomNumberGeneratorMock struct {
	// IntnFunc mocks the Intn method.
	IntnFunc func(n int) int

	// calls tracks calls to the methods.
	calls struct {
		// Intn holds details about calls to the Intn method.
		Intn []struct {
			// N is the n argument value.
			N int
		}
	}
	lockIntn sync.RWMutex
}

// Intn calls IntnFunc.
func (mock *RandomNumberGeneratorMock) Intn(n int) int {
	if mock.IntnFunc == nil {
		panic("RandomNumberGeneratorMock.IntnFunc: method is nil but RandomNumberGenerator.Intn was just called")
	}
	callInfo := struct {
		N int
	}{
		N: n,
	}
	mock.lockIntn.Lock()
	mock.calls.Intn = append(mock.calls.Intn, callInfo)
	mock.lockIntn.Unlock()
	return mock.IntnFunc(n)
}

// IntnCalls gets all the calls that were made to Intn.
// Check the length with:
//     len(mockedRandomNumberGenerator.IntnCalls())
func (mock *RandomNumberGeneratorMock) IntnCalls() []struct {
	N int
} {
	var calls []struct {
		N int
	}
	mock.lockIntn.RLock()
	calls = mock.calls.Intn
	mock.lockIntn.RUnlock()
	return calls
}
